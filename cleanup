#!/bin/bash
current_date_time=$(date)
rc_file=$1
tag="$2"
publickey=$3

required_servers=3

pvtkey="${publickey%.pub}"
current_dir="$(pwd)"
pvtkey_path="${current_dir}/${pvtkey}"

echo "$current_date_time Starting CleanUp with tag:$tag using $rc_file for credentials."
source $rc_file

# Define variables
name_of_the_network="${tag}_network"
name_of_the_subnet="${tag}_subnet"
name_of_the_keypair="${tag}_key"
name_of_the_router="${tag}_router"
name_of_the_securitygroup="${tag}_security_group"
haproxy_server1="${tag}_HAproxy1"
haproxy_server2="${tag}_HAproxy2"
bastion_server="${tag}_bastion"
server_name="${tag}_dev"
vport_name="${tag}_vport" #virtual ip port name

sshconfig="config"
hostsfile="hosts"
vport_file="vipaddr"
floating_ip1="floating_ip1"
floating_ip2="floating_ip2"

######                 Delete Network                ##########################

# Delete Keypairs 
del_keypair() {
        keypairs=$(openstack keypair list -f value -c Name | grep "$tag.*")

        if [ -n "$keypairs" ]; then
                for key in $keypairs; do    #deletes all keypairs with same tag
                        openstack keypair delete $key
                done
                echo "$(date) Keypairs: Deleted keypair $name_of_the_keypair."
        else
                echo "$(date) Keypairs: Doesn't exists $name_of_the_keypair."
        fi
}


# Delete Security Groups
del_security_group() {        
        security_group=$(openstack security group list --tag $tag -f value -c Name)
        if [ -n "$security_group" ]; then
                for sec in $security_group; do
                    openstack security group delete "$sec"
                done
                echo "$(date) Security Group: Deleted security group $name_of_the_securitygroup."
        else
                echo "$(date) Security Group: Doesn't exists $name_of_the_securitygroup."
        fi
}

# Delete Network and its Componenets
del_network() {

        # Delete Router
        # remove_ext_gateway=$(openstack router unset --external-gateway $existing_routers)
        
        router_id=$(openstack router list --name $name_of_the_router -c ID -f value)
        echo "$(date) Network: existing router: $router_id"
        if [ -n "$router_id" ]; then
                
                for id in $router_id; do
                        echo "$(date) Network: Checking router ID $id"
                        
                        # Check if router has attached ports
                        attached_port_ids=$(openstack router show -f json $id | jq -r '.interfaces_info[].port_id')
                        echo "$(date) Network: Attached Ports IDs: $attached_port_ids"
                        
                        if [ -n "$attached_port_ids" ]; then

                                # Disassociate ports from the router
                                for port_id in $attached_port_ids; do
                                        openstack router remove port $id $port_id
                                        echo "$(date) Network: removed port:$port_id from router:$id."
                                done
                                
                                # Introduce a small delay before attempting deletion
                                sleep 2
                        else
                                echo "$(date) Network: No attached ports to router:$id."
                        fi

                        # Delete the router
                        openstack router delete "$id"
                        echo "$(date) Network: Deleted router $name_of_the_router."
                done
        else
                echo "$(date) Network: Doesn't exist $name_of_the_router."
        fi

        # Disconnect subnet & Delete Subnet
        # subnet_id=$(openstack router show "$name_of_the_router" -f json -c interfaces_info | grep -oP '(?<="subnet_id": ")[^"]+' | awk '{print $1}')

        subnet_id=$(openstack subnet list --tag "$tag" -c ID -f value)
        if [ -n "$subnet_id" ]; then
                for sub in $subnet_id; do
                        openstack router remove subnet "$name_of_the_router" "$sub"
                        openstack subnet delete "$sub"
                done
                echo "$(date) Network: Deleted subnet $name_of_the_subnet."
        else
                echo "$(date) Network: Doesn't exists $name_of_the_subnet."
        fi

        # Delete Network
        networks=$(openstack network list --tag $tag -f value -c Name)
        if [ -n "$networks" ]; then
                for net in $networks; do
                        openstack network delete "$net"
                done
                echo "$(date) Network: Deleted network $name_of_the_network."
        else
                echo "$(date) Network: Doesn't exists $name_of_the_network."
        fi
}

# Delete Servers
del_servers() {
        # Get the list of servers matching the keyword
        servers=$(openstack server list --name "$tag" -c ID -f value)
        n=$(echo "$servers" | wc -l)
        # Loop through each server and delete it
        if [ -n "$servers" ]; then
                echo "$(date) Found $n server(s), Deleting them."

                for server_id in $servers; do
                        openstack server delete $server_id
                done
                echo "$(date) Servers: Existing servers Deleted." 
        else
                echo "$(date) Servers: Doesn't exists $tag Servers."
        fi
}

# Delete Virtual Port
del_vport() {

        existing_vport=$(openstack port list | grep "$vport_name" | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}')
        if [[ -n "$existing_vport" ]]; then                
                openstack port delete "$vport_name"
                echo "$(date) Virtual Port: Deleted $vport_name."
        else
                echo "$(date) Virtual Port: Doesn't exists $vport_name."
        fi
        
        # Delete VPort IP file
        if [[ -f "$vport_file" ]] ; then
                rm "$vport_file"
                echo "$(date) Virtual Port: $vport_file file Deleted."
        else
                echo "$(date) Virtual Port: Doesn't exists $vport_file."
        fi
}

# Unassign floating IPs
detach_floating_IPs() {        
        assigned_fips=$(openstack floating ip list --status ACTIVE -c "Floating IP Address" -f value)
        if [[ -n $assigned_fips ]]; then
                for fip in $assigned_fips; do
                        openstack floating ip unset --port "$fip"
                        echo "$(date) Floating IPs: Detached Floating IP $fip from port."
                done
        else
                echo "$(date) Floating IPs: Doesn't exists Active Floating IPs."
        fi
}
