#!/bin/bash
current_date_time=$(date)
rc_file=$1
tag="$2"
publickey=$3

required_servers=3

pvtkey="${publickey%.pub}"
current_dir="$(pwd)"
pvtkey_path="${current_dir}/${pvtkey}"

echo "$current_date_time Starting deployment with tag:$tag using $rc_file credentials."
source $rc_file

# Define variables
name_of_the_network="${tag}_network"
name_of_the_subnet="${tag}_subnet"
name_of_the_keypair="${tag}_key"
name_of_the_router="${tag}_router"
name_of_the_securitygroup="${tag}_security_group"
haproxy_server1="${tag}_HAproxy1"
haproxy_server2="${tag}_HAproxy2"
bastion_server="${tag}_bastion"
server_name="${tag}_dev"
vport_name="${tag}_vport" #virtual ip port name

sshconfig="config"
hostsfile="hosts"
vport_file="vipaddr"
status_new=false

##########        SETTING UP NETWORK               ###########################

build_keypairs()
{
        # Check if keypair exists
        existing_keypairs=$(openstack keypair list -f value --column Name)

        if echo "$existing_keypairs" | grep -qFx $name_of_the_keypair; then
                        echo "$(date) Keypair: Already exists $name_of_the_keypair"
                        echo "$(date) Keypair: The existing keypairs are: $existing_keypairs"
        else
                        # Create Keypair
                        Created_keypair=$(openstack keypair create --public-key "$publickey" "$name_of_the_keypair" )
                        echo "$(date) Keypair: Created keypair $name_of_the_keypair"
        fi
}

build_securityGrp()
{
        # check if security group already exists
        existing_security_groups=$(openstack security group list --tag $tag -f value)
        # create security group
        if [[ -z "$existing_security_groups" ||  "$existing_security_groups" != *"$name_of_the_securitygroup"* ]]
        then
                        Created_security_group=$(openstack security group create --tag $tag $name_of_the_securitygroup -f json)
                        rule1=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 22 --protocol tcp --ingress $name_of_the_securitygroup)
                        rule2=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 80 --protocol icmp --ingress $name_of_the_securitygroup)
                        rule3=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 5000 --protocol tcp --ingress $name_of_the_securitygroup)
                        rule4=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 8080 --protocol tcp --ingress $name_of_the_securitygroup)
                        rule5=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 6000 --protocol udp --ingress $name_of_the_securitygroup)
                        rule6=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 9090 --protocol tcp --ingress $name_of_the_securitygroup)
                        rule7=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 9100 --protocol tcp --ingress $name_of_the_securitygroup)
                        rule8=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 3000 --protocol tcp --ingress $name_of_the_securitygroup)
                        rule9=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 161 --protocol udp --ingress $name_of_the_securitygroup)
                        rule10=$(openstack security group rule create --protocol 112 $name_of_the_securitygroup) #VVRP protocol

                        echo "$(date) Security Group: Created $name_of_the_securitygroup"
        else
                        echo "$(date) Security Group: Already exists $name_of_the_securitygroup"
        fi
}

build_network()
{
        # Check if network already exists
        existing_networks=$(openstack network list --tag "$tag" --column Name -f value)


        if echo "$existing_networks" | grep -qFx $name_of_the_network; then
                        echo "$(date) Network: Already exists $name_of_the_network"
                        echo "$(date) Network: The existing networks are: $existing_networks"
        else
                        # Create network
                        Created_network=$(openstack network create --tag "$tag" "$name_of_the_network" -f json)
                        echo "$(date) Network: Created network $name_of_the_network"
        fi

        # Check if subnet already exists
        existing_subnets=$(openstack subnet list --tag "$tag" --column Name -f value)

        if echo "$existing_subnets" | grep -qFx $name_of_the_subnet; then
                        echo "$(date) Network: Already exists $name_of_the_subnet"
        else
                        # Create network
                        Created_subnet=$(openstack subnet create --subnet-range 10.10.0.0/24 --allocation-pool start=10.10.0.2,end=10.10.0.30 --tag "$tag" --network "$name_of_the_network" "$name_of_the_subnet" -f json)        
                        echo "$(date) Network: Created subnet $name_of_the_subnet"
        fi

        # check if router already exists
        existing_routers=$(openstack router list --tag "$tag" --column Name -f value)

        if echo "$existing_routers" | grep -qFx $name_of_the_router; then
                        echo "$(date) Network: Already exists $name_of_the_router"
        else
                        Created_router=$(openstack router create --tag $tag $name_of_the_router )

                        # add subnet and externel gateway to the router
                        set_gateway=$(openstack router set --external-gateway ext-net $name_of_the_router)
                        add_subnet=$(openstack router add subnet $name_of_the_router $name_of_the_subnet)

                        echo "$(date) Network: Created router $name_of_the_router"
                        echo ""
        fi
}

#########           CONFIGURING SERVERS             ######################

#1. BASTION SERVER
build_bastion() {
        #1      CREATE Bastion Server           ##
        existing_bastion=$(openstack server list --status ACTIVE --column Name -f value | grep "^$bastion_server$") #get exact match in search

        if echo "$existing_bastion" | grep -q "\b$bastion_server\b"; then
                        echo "$(date) Bastion: Already exists $bastion_server"
        else
                        bastion=$(openstack server create --image "Ubuntu 20.04 Focal Fossa x86_64" $bastion_server --key-name $name_of_the_keypair --flavor "1C-2GB-50GB" --network $name_of_the_network --security-group $name_of_the_securitygroup)
                        while true; do                                
                                        server_status=$(openstack server show "$bastion_server" -f value -c status)
                                        if [ "$server_status" == "ACTIVE" ]; then
                                                        break
                                        fi
                        done                        
                        echo "$(date) Bastion: Created server $bastion_server."
        fi

        # BASTION FIXED-IP
        bastion_ip=$(openstack server show $bastion_server -c addresses -f value | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}'| awk 'NR==1')
        echo "$(date) Bastion: Fixed IP:--$bastion_ip"

        #2.      existing FLOATING IPs           ##
        existing_bastion_fip=$(openstack floating ip list --fixed-ip-address $bastion_ip -c "Floating IP Address" -f value)
        
        if [[ -n "$existing_bastion_fip" ]]; then
                        ### 3.     GET: FLOATING IP 1           ###
                        echo "$(date) Bastion: Floating IP:$existing_bastion_fip found attached to Bastion IP:$bastion_ip"
                        fip1=$existing_bastion_fip   
                        echo $fip1 > floating_ip1 
        else
                        ### 3.     CREATE: FLOATING IP 1        ###
                        echo "$(date) Bastion: Assigning Floating IP for Bastion"
                        fip1=$(create_fip)
                        echo $fip1 > floating_ip1 # storing fip1 in a file "floating_ip1"

                        #1 ADD: Adding FLOATING IP (to the)---> BASTION Server.
                        update_fip1=$(openstack server add floating ip $bastion_server $fip1)           
        fi

        bastion_fip=$(openstack floating ip list --fixed-ip-address $bastion_ip -c "Floating IP Address" -f value)
                
        echo "$(date) Bastion: Configured with Fixed-IP:$bastion_ip & Floating-IP:$bastion_fip."
        echo ""
}

#2. HAPROXY SERVERS
build_HAproxy() {
        existing_haproxy1=$(openstack server list --status ACTIVE --column Name -f value | grep "^$haproxy_server1$") #get exact match in search
        if echo "$existing_haproxy1" | grep -q "\b$haproxy_server1\b"; then
                        echo "$(date) HAproxy: Already exists $haproxy_server1"
        else
                        haproxy1=$(openstack server create --image "Ubuntu 20.04 Focal Fossa x86_64" $haproxy_server1 --key-name $name_of_the_keypair --flavor "1C-2GB-50GB" --network $name_of_the_network --security-group $name_of_the_securitygroup)
                        while true; do                                
                                        server_status1=$(openstack server show "$haproxy_server1" -f value -c status)
                                        if [ "$server_status1" == "ACTIVE" ]; then
                                                        break
                                        fi
                        done  
                        echo "$(date) HAproxy: Created server $haproxy_server1"
                        status_new=true
        fi

        existing_haproxy2=$(openstack server list --status ACTIVE --column Name -f value | grep "^$haproxy_server2$") #get exact match in search
        if echo "$existing_haproxy2" | grep -q "\b$haproxy_server2\b"; then
                        echo "$(date) HAproxy: Already exists $haproxy_server2"
        else
                        haproxy2=$(openstack server create --image "Ubuntu 20.04 Focal Fossa x86_64" $haproxy_server2 --key-name $name_of_the_keypair --flavor "1C-2GB-50GB" --network $name_of_the_network --security-group $name_of_the_securitygroup)
                        while true; do                                
                                        server_status2=$(openstack server show "$haproxy_server2" -f value -c status)
                                        if [ "$server_status2" == "ACTIVE" ]; then
                                                        break
                                        fi
                        done  
                        echo "$(date) HAproxy: Created server $haproxy_server2."
                        status_new=true
        fi      
}

#3. VIRTUAL PORT
config_vport() {
        # HAproxy IPs
        ip_ha1=$(openstack server show $haproxy_server1 -c addresses -f value | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}')
        ip_ha2=$(openstack port list --server $haproxy_server2 -f json | jq -r '.[0]."Fixed IP Addresses"[0].ip_address')

        echo "$(date) HAproxy: Configured with Fixed IPs: $ip_ha1 and $ip_ha2" 

        #1.      create VIRTUAL PORT            ##
        existing_vport=$(openstack port list | grep "$vport_name" | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}')
        if [[ -n "$existing_vport" ]]; then
                        echo "$(date) Virtual Port: Already exists $vport_name"
        else
                        new_virtualport=$(openstack port create --network "$name_of_the_network" --fixed-ip subnet="$name_of_the_subnet" --no-security-group "$vport_name")
                        echo "$(date) Virtual Port: Created port $vport_name"
                        status_new=true
        fi

        # IP addr Virtual Port
        ip_vport=$(openstack port show $vport_name --format json | jq -r '.fixed_ips[0].ip_address')
        echo "$ip_vport" >> $vport_file # keeping V-Port FIXED IP address in a file "vipaddr"  

        #2.      existing FLOATING IPs           ##

        existing_vport_fip=$(openstack floating ip list --fixed-ip-address $ip_vport -c "Floating IP Address" -f value)
        if [[ -n "$existing_vport_fip" ]]; then
                        #echo "$(date) Floating IPs $existing_vport_fip are available"

                        ### 3.     GET: FLOATING IP 2           ###
                        echo "$(date) Virtual Port: Floating IP:$existing_vport_fip found attached to VPort IP: $ip_vport"
                        fip2=$existing_vport_fip   
                        echo $fip2 > floating_ip2 
        else
                        ### 3.     CREATE: FLOATING IP 2        ###
                        echo "$(date) Virtual Port: Assigning Floating IP for HAproxy Servers"
                        fip2=$(create_fip)
                        echo $fip2 > floating_ip2 # storing fip2 in a file "floating_ip2"

                        #1 SET: Attaching VIRTUAL PORT (to the)---> FLOATING IP.
                        update_fip2=$(openstack floating ip set --port $vport_name $fip2)

                        status_new=true           
        fi

        if [[ "$status_new" == true ]]; then
                        echo "$(date) Virtual Port: Configuring"

                        status_new=false

                        #  EMPTY VIRTUAL PORT allowed addresses if exists   
                        allowed_vport=$(openstack port show $vport_name --format json | jq -r '.allowed_address_pairs[0].ip_address')

                        if [[ -n "$allowed_vport" ]]; then
                                        empty_vport=$(openstack port set --no-allowed-address $vport_name)
                        fi

                        #2 SET: Update/Attaching FLOATING IP (to the)---> VIRTUAL PORT. 
                        update_vport=$(openstack port set --allowed-address ip-address="$fip2" $vport_name)

                        #3 SET: Attaching the HAproxy Port IPs (to the)---> VIRTUAL PORT.
                        up_vport_ha1=$(openstack port set --allowed-address ip-address=$ip_ha1 $vport_name)
                        up_vport_ha2=$(openstack port set --allowed-address ip-address=$ip_ha2 $vport_name)

                        # HAproxy PORT IDs
                        portid_ha1=$(openstack port list --server $haproxy_server1 -c ID -f value)
                        portid_ha2=$(openstack port list --server $haproxy_server2 -c ID -f value)
                        
                        # HAproxy FIXED IPs
                        allowed_ha1=$(openstack port show $portid_ha1 --format json | jq -r '.allowed_address_pairs[0].ip_address')
                        allowed_ha2=$(openstack port show $portid_ha2 --format json | jq -r '.allowed_address_pairs[0].ip_address')

                        #4 SET: Attaching VIRTUAL PORT *FIXED-IP* (to the)---> HAPROXY SERVERs-IDs.
                        if [[ -n "$allowed_ha1" ]]; then
                                        empty_ha1=$(openstack port set --no-allowed-address $portid_ha1)
                        fi        
                        update_ha1=$(openstack port set --allowed-address ip-address=$ip_vport $portid_ha1)

                        if [[ -n "$allowed_ha2" ]]; then
                                        empty_ha2=$(openstack port set --no-allowed-address $portid_ha2)
                        fi
                        update_ha2=$(openstack port set --allowed-address ip-address=$ip_vport $portid_ha2)
        else
                        echo "$(date) Virtual Port: already configured"
        fi

        haproxy_fip=$(openstack floating ip list --fixed-ip-address $ip_vport -c "Floating IP Address" -f value)
        echo "$(date) Virtual Port: Configured with HAproxy Servers -- FLOATING IP:$haproxy_fip"
        echo ""
}

create_fip() {
        local floating_ip=""

        unassigned_ips=$(openstack floating ip list --status DOWN -f value -c "Floating IP Address")
        if [[ -n "$unassigned_ips" ]]; then
                        floating_ip=$(echo "$unassigned_ips" | awk 'NR==1')            
        else
                        floating_ip=$(openstack floating ip create ext-net -f json | jq -r '.floating_ip_address')
        fi
        echo "$floating_ip"
}

#########           DEV Nodes SETUP             ###################
build_servers() {

        local list_arguments=("$@")

        local required_servers=${list_arguments[0]}
        local server_name="${list_arguments[1]}"
        local servers=()

        for (( i = 2; i < ${#list_arguments[@]}; i++ )) ; do
                servers+=("${list_arguments[i]}")
        done

        for (( sequence = 1; sequence <= required_servers; sequence++ )); do
                new_server_name="${server_name}${sequence}"
                #echo "$(date) $new_server_name"
                
                if ! exists_in_list "${servers[@]}" " " "$new_server_name"; then            
                                server_output=$(openstack server create --image "Ubuntu 20.04 Focal Fossa x86_64"  $new_server_name --key-name "$name_of_the_keypair" --flavor "1C-2GB-50GB" --network $name_of_the_network --security-group $name_of_the_securitygroup)
                                while true; do                                
                                        server_status=$(openstack server show "$new_server_name" -f value -c status)
                                        if [ "$server_status" == "ACTIVE" ]; then
                                                        break
                                        fi
                                done
                                echo "$(date) Dev Nodes: Created $new_server_name server "
                else
                                true
                fi
        done
}

remove_servers() {

        local remove_count=$1
        local servers=("${@:2:$#}")
        local sequence=0

        while true; do

                random_index=$((RANDOM % ${#servers[@]}))
                server_to_remove=${servers[random_index]}

                deleted_server=$(openstack server delete "$server_to_remove" --wait)
                echo "$(date) Dev Nodes: Deleted $server_to_remove server"

                ((sequence++))
                if (( $sequence == $remove_count )); then
                                break
                fi
        done
}

exists_in_list() {
        LIST=("$@")  # Store all arguments in the array
        TARGET="${LIST[-1]}"  # The last argument is the element to search for

        # Remove the last element (TARGET) from the array
        unset "LIST[${#LIST[@]}-1]"

        if echo "${LIST[@]}" | grep -wq "$TARGET"; then
                        return 0  # Return success (element found)
        else
                        return 1  # Return failure (element not found)
        fi
}

##########          GENERATING CONFIG FILES          #############################

generate_sshfile() {

        if [[ -f "$sshconfig" ]] ; then
                        rm "$sshconfig"
        fi

        active_servers=$(openstack server list --status ACTIVE -f value -c Name | grep "$server_name")

        echo "Host $bastion_server" >> $sshconfig
        echo "   User ubuntu" >> $sshconfig
        echo "   HostName $bastion_fip" >> $sshconfig
        echo "   IdentityFile $pvtkey_path" >> $sshconfig
        echo "   UserKnownHostsFile /dev/null" >> $sshconfig
        echo "   StrictHostKeyChecking no" >> $sshconfig
        echo "   PasswordAuthentication no" >> $sshconfig

        echo " " >> $sshconfig
        echo "Host $haproxy_server1" >> $sshconfig
        echo "   User ubuntu" >> $sshconfig
        echo "   HostName $ip_ha1" >> $sshconfig
        echo "   IdentityFile $pvtkey_path" >> $sshconfig
        echo "   StrictHostKeyChecking no" >> $sshconfig
        echo "   PasswordAuthentication no ">> $sshconfig
        echo "   ProxyJump $bastion_server" >> $sshconfig

        echo " " >> $sshconfig
        echo "Host $haproxy_server2" >> $sshconfig
        echo "   User ubuntu" >> $sshconfig
        echo "   HostName $ip_ha2" >> $sshconfig
        echo "   IdentityFile $pvtkey_path" >> $sshconfig
        echo "   StrictHostKeyChecking no" >> $sshconfig
        echo "   PasswordAuthentication no ">> $sshconfig
        echo "   ProxyJump $bastion_server" >> $sshconfig

        # Loop through each active server and extract its IP address
        for server in $active_servers; 
        do
                ip_address=$(openstack server list --name $server -c Networks -f value | grep -Po  '\d+\.\d+\.\d+\.\d+')

                echo " " >> $sshconfig
                echo "Host $server" >> $sshconfig
                echo "   User ubuntu" >> $sshconfig
                echo "   HostName $ip_address" >> $sshconfig
                echo "   IdentityFile $pvtkey_path" >> $sshconfig
                echo "   UserKnownHostsFile=~/dev/null" >> $sshconfig
                echo "   StrictHostKeyChecking no" >> $sshconfig
                echo "   PasswordAuthentication no" >> $sshconfig
                echo "   ProxyJump $bastion_server" >> $sshconfig
        done

        echo "$(date) Config Files: Generated"
}

generate_hostsfile() {

        if [[ -f "$hostsfile" ]] ; then
                        rm "$hostsfile"
        fi

        active_servers=$(openstack server list --status ACTIVE -f value -c Name | grep "$server_name")

        # generate hosts file
        echo "[bastion]" >> $hostsfile
        echo "$bastion_server" >> $hostsfile
        echo " " >> $hostsfile
        echo "[HAproxy]" >> $hostsfile
        echo "$haproxy_server1" >> $hostsfile
        echo "$haproxy_server2" >> $hostsfile

        echo " " >> $hostsfile
        echo "[webservers]" >> $hostsfile

        # Loop through each active server and extract its IP address
        for server in $active_servers; do
                echo "$server" >> $hostsfile
        done

        echo " " >> $hostsfile
        echo "[primary_proxy]" >> $hostsfile
        echo "$haproxy_server1" >> $hostsfile
        echo " " >> $hostsfile
        echo "[backup_proxy]" >> $hostsfile
        echo "$haproxy_server2" >> $hostsfile

        echo " " >> $hostsfile
        echo "[all:vars]" >> $hostsfile
        echo "ansible_user=ubuntu" >> $hostsfile
        echo "ansible_ssh_private_key_file=$pvtkey_path" >> $hostsfile
        echo "ansible_ssh_common_args=' -F $sshconfig '" >> $hostsfile

        echo "$(date) Hosts Files: Generated"
}

############################################################################################


#########       MAIN SCRIPT          #######################

build_keypairs
build_securityGrp
build_network

build_bastion
build_HAproxy
config_vport

#########       Dev Nodes Config        ##############

# Get the list from the file
active_servers=$(openstack server list --status ACTIVE -f value -c Name | grep "$server_name" | sed ':a;N;$!ba;s/\n/ /g')
#echo "$(date) $active_servers"

# Use read command to split the input string into elements based on whitespace
# and populate the servers_list array
read -ra servers_list <<< "$active_servers"

echo "$(date) Dev Nodes: ${servers_list[@]}"

servers_count=${#servers_list[@]}
echo "$(date) Dev Nodes: Servers' Count: $servers_count"

if (( required_servers > servers_count )); then

                echo "$(date) Dev Nodes: Creating Nodes"

                build_servers "$required_servers" "$server_name"
                echo "$(date) Dev Nodes: Created $required_servers Nodes"

                generate_sshfile
                generate_hostsfile

                sleep 20
                run_ansible

elif (( required_servers < servers_count )); then

                echo "$(date) Dev Nodes: Removing Nodes"

                remove_count=$(( servers_count - required_servers ))
                echo "$(date) Dev Nodes: Removing $remove_count Nodes"

                remove_servers "$remove_count" "${servers_list[@]}"
                echo "$(date) Dev Nodes: Removed $remove_count Nodes"  

                generate_sshfile
                generate_hostsfile

                sleep 20
                run_ansible
else
                echo "$(date) Dev Nodes: Required number of dev nodes ($required_servers) already exist."
fi

#  Obtaining Floating IPs
echo "$(date) Bastion Floating IP address: $bastion_fip"
echo "$(date) HAproxy Floating IP address: $haproxy_fip"

############################################################################

sleep 30

#  Running Playbook 
echo "$(date) Running ansible-playbook"
ansible-playbook -i "$hostsfile" site.yaml

#  Obtaining Floating IPs
echo "$(date) Bastion Floating IP address: $bastion_fip"
echo "$(date) HAproxy Floating IP address: $haproxy_fip"

echo "$(date) Install Completed"
