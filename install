#!/bin/bash
current_date_time=$(date)
rc_file=$1
tag="$2"
publickey=$3

required_servers=3

pvtkey="${publickey%.pub}"
current_dir="$(pwd)"
pvtkey_path="${current_dir}/${pvtkey}"

echo "$current_date_time Starting deployment with tag:$tag using $rc_file for credentials."
source $rc_file

# Define variables
name_of_the_network="${tag}_network"
name_of_the_subnet="${tag}_subnet"
name_of_the_keypair="${tag}_key"
name_of_the_router="${tag}_router"
name_of_the_securitygroup="${tag}_security_group"
haproxy_server1="${tag}_HAproxy1"
haproxy_server2="${tag}_HAproxy2"
bastion_server="${tag}_bastion"
server_name="${tag}_dev"
vport_name="${tag}_vport" #virtual ip port name

sshconfig="config"
hostsfile="hosts"
vport_file="vipaddr"

##########        SETTING UP NETWORK               ###########################

build_keypairs()
{
        # Check if keypair exists
        existing_keypairs=$(openstack keypair list -f value --column Name)

        if echo "$existing_keypairs" | grep -qFx $name_of_the_keypair; then
                        echo "$(date) Keypair: Already exists $name_of_the_keypair"
                        echo "$(date) Keypair: The existing keypairs are: $existing_keypairs"
        else
                        # Create Keypair
                        Created_keypair=$(openstack keypair create --public-key "$publickey" "$name_of_the_keypair" )
                        echo "$(date) Keypair: Created keypair $name_of_the_keypair"
        fi
}

build_securityGrp()
{
        # check if security group already exists
        existing_security_groups=$(openstack security group list --tag $tag -f value)
        # create security group
        if [[ -z "$existing_security_groups" ||  "$existing_security_groups" != *"$name_of_the_securitygroup"* ]]
        then
                        Created_security_group=$(openstack security group create --tag $tag $name_of_the_securitygroup -f json)
                        rule1=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 22 --protocol tcp --ingress $name_of_the_securitygroup)
                        rule2=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 80 --protocol icmp --ingress $name_of_the_securitygroup)
                        rule3=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 5000 --protocol tcp --ingress $name_of_the_securitygroup)
                        rule4=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 8080 --protocol tcp --ingress $name_of_the_securitygroup)
                        rule5=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 6000 --protocol udp --ingress $name_of_the_securitygroup)
                        rule6=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 9090 --protocol tcp --ingress $name_of_the_securitygroup)
                        rule7=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 9100 --protocol tcp --ingress $name_of_the_securitygroup)
                        rule8=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 3000 --protocol tcp --ingress $name_of_the_securitygroup)
                        rule9=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 161 --protocol udp --ingress $name_of_the_securitygroup)
                        rule10=$(openstack security group rule create --protocol 112 $name_of_the_securitygroup) #VVRP protocol

                        echo "$(date) Security Group: Created $name_of_the_securitygroup"
        else
                        echo "$(date) Security Group: Already exists $name_of_the_securitygroup"
        fi
}

build_network()
{
        # Check if network already exists
        existing_networks=$(openstack network list --tag "$tag" --column Name -f value)


        if echo "$existing_networks" | grep -qFx $name_of_the_network; then
                        echo "$(date) Network: Already exists $name_of_the_network"
                        echo "$(date) Network: The existing networks are: $existing_networks"
        else
                        # Create network
                        Created_network=$(openstack network create --tag "$tag" "$name_of_the_network" -f json)
                        echo "$(date) Network: Created network $name_of_the_network"
        fi

        # Check if subnet already exists
        existing_subnets=$(openstack subnet list --tag "$tag" --column Name -f value)

        if echo "$existing_subnets" | grep -qFx $name_of_the_subnet; then
                        echo "$(date) Network: Already exists $name_of_the_subnet"
        else
                        # Create network
                        Created_subnet=$(openstack subnet create --subnet-range 10.10.0.0/24 --allocation-pool start=10.10.0.2,end=10.10.0.30 --tag "$tag" --network "$name_of_the_network" "$name_of_the_subnet" -f json)        
                        echo "$(date) Network: Created subnet $name_of_the_subnet"
        fi

        # check if router already exists
        existing_routers=$(openstack router list --tag "$tag" --column Name -f value)

        if echo "$existing_routers" | grep -qFx $name_of_the_router; then
                        echo "$(date) Network: Already exists $name_of_the_router"
        else
                        Created_router=$(openstack router create --tag $tag $name_of_the_router )

                        # add subnet and externel gateway to the router
                        set_gateway=$(openstack router set --external-gateway ext-net $name_of_the_router)
                        add_subnet=$(openstack router add subnet $name_of_the_router $name_of_the_subnet)

                        echo "$(date) Network: Created router $name_of_the_router"
        fi
}

#########           CONFIGURING SERVERS             ######################

#1. BASTION SERVER
build_bastion() {
        #1      CREATE Bastion Server           ##
        existing_bastion=$(openstack server list --status ACTIVE --column Name -f value | grep "^$bastion_server$") #get exact match in search

        if echo "$existing_bastion" | grep -q "\b$bastion_server\b"; then
                        echo "$(date) Bastion: Already exists $bastion_server"
        else
                        bastion=$(openstack server create --image "Ubuntu 20.04 Focal Fossa x86_64" $bastion_server --key-name $name_of_the_keypair --flavor "1C-2GB-50GB" --network $name_of_the_network --security-group $name_of_the_securitygroup)
                        while true; do                                
                                        server_status=$(openstack server show "$bastion_server" -f value -c status)
                                        if [ "$server_status" == "ACTIVE" ]; then
                                                        break
                                        fi
                        done                        
                        echo "$(date) Bastion: Created server $bastion_server."
        fi

        # BASTION FIXED-IP
        bastion_ip=$(openstack server show $bastion_server -c addresses -f value | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}'| awk 'NR==1')
        echo "$(date) Bastion: Fixed IP:--$bastion_ip"

        #2.      existing FLOATING IPs           ##
        existing_bastion_fip=$(openstack floating ip list --fixed-ip-address $bastion_ip -c "Floating IP Address" -f value)
        
        if [[ -n "$existing_bastion_fip" ]]; then
                        ### 3.     GET: FLOATING IP 1           ###
                        echo "$(date) Bastion: Floating IP:$existing_bastion_fip found attached to Bastion IP:$bastion_ip"
                        fip1=$existing_bastion_fip   
                        echo $fip1 > floating_ip1 
        else
                        ### 3.     CREATE: FLOATING IP 1        ###
                        echo "$(date) Bastion: Creating Floating IP for Bastion"
                        fip1=$(create_fip)
                        echo $fip1 > floating_ip1 # storing fip1 in a file "floating_ip1"

                        #1 ADD: Adding FLOATING IP (to the)---> BASTION Server.
                        update_fip1=$(openstack server add floating ip $bastion_server $fip1)           
        fi

        bastion_fip=$(openstack floating ip list --fixed-ip-address $bastion_ip -c "Floating IP Address" -f value)
                
        echo "$(date) Bastion: Configured with Fixed-IP:$bastion_ip & Floating-IP:$bastion_fip."
}

#2. HAPROXY SERVERS
build_HAproxy() {
        existing_haproxy1=$(openstack server list --status ACTIVE --column Name -f value | grep "^$haproxy_server1$") #get exact match in search
        if echo "$existing_haproxy1" | grep -q "\b$haproxy_server1\b"; then
                        echo "$(date) HAproxy: Already exists $haproxy_server1"
        else
                        haproxy1=$(openstack server create --image "Ubuntu 20.04 Focal Fossa x86_64" $haproxy_server1 --key-name $name_of_the_keypair --flavor "1C-2GB-50GB" --network $name_of_the_network --security-group $name_of_the_securitygroup)
                        while true; do                                
                                        server_status1=$(openstack server show "$haproxy_server1" -f value -c status)
                                        if [ "$server_status1" == "ACTIVE" ]; then
                                                        break
                                        fi
                        done  
                        echo "$(date) HAproxy: Created server $haproxy_server1"
        fi

        existing_haproxy2=$(openstack server list --status ACTIVE --column Name -f value | grep "^$haproxy_server2$") #get exact match in search
        if echo "$existing_haproxy2" | grep -q "\b$haproxy_server2\b"; then
                        echo "$(date) HAproxy: Already exists $haproxy_server2"
        else
                        haproxy2=$(openstack server create --image "Ubuntu 20.04 Focal Fossa x86_64" $haproxy_server2 --key-name $name_of_the_keypair --flavor "1C-2GB-50GB" --network $name_of_the_network --security-group $name_of_the_securitygroup)
                        while true; do                                
                                        server_status2=$(openstack server show "$haproxy_server2" -f value -c status)
                                        if [ "$server_status2" == "ACTIVE" ]; then
                                                        break
                                        fi
                        done  
                        echo "$(date) HAproxy: Created server $haproxy_server2."
        fi      
}
