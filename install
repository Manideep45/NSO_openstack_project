#!/bin/bash
current_date_time=$(date)
rc_file=$1
tag_name=$2
publickey=$3
required_dev_servers=3

echo "$current_date_time Starting deployment of $tag_name using $rc_file for credentials."
source $rc_file

# Define variables
name_of_the_network="$2_newnetwork"
name_of_the_subnet="$2_newsubnet"
name_of_the_keypair="$2_newkey"
name_of_the_router="$2_newrouter"
name_of_the_securitygroup="$2_security_group"
haproxy_server="$2_HAproxy"
haproxy_server2="$2_HAproxy2"
bastion_server="$2_bastion"
dev_server="$2_dev"
vip_port="$2_vip" #virtual ip port
sshconfig="config"
knownhosts="known_hosts"
hostsfile="hosts"

# Check if keypair exists
existing_keypairs=$(openstack keypair list -f value --column Name)
if echo "$existing_keypairs" | grep -qFx $name_of_the_keypair; then
    echo "$(date) $name_of_the_keypair already exists"
else
    # Create Keypair
    created_keypair=$(openstack keypair create --public-key $publickey "$name_of_the_keypair" )
    echo "$(date) Created keypair $name_of_the_keypair"
fi


# Check if network already exists
existing_networks=$(openstack network list --tag "$tag_name" --column Name -f value)

if echo "$existing_networks" | grep -qFx $name_of_the_network; then
    echo "$(date) $name_of_the_network already exists"
else
    # Create network
    created_network=$(openstack network create --tag "$tag_name" "$name_of_the_network" -f json)
    echo "$(date) Created network $name_of_the_network"
fi

# Check if subnet already exists
existing_subnets=$(openstack subnet list --tag "$tag_name" --column Name -f value)

if echo "$existing_subnets" | grep -qFx $name_of_the_subnet; then
    echo "$(date) $name_of_the_subnet already exists"
else
    # Create network
    created_subnet=$(openstack subnet create --subnet-range 10.10.0.0/24 --allocation-pool start=10.10.0.2,end=10.10.0.30 --tag "$tag_name" --network "$name_of_the_network" "$name_of_the_subnet" -f json)
    echo "$(date) Created subnet $name_of_the_subnet"
fi

# check if router already exists
existing_routers=$(openstack router list --tag "$tag_name" --column Name -f value)
if echo "$existing_routers" | grep -qFx $name_of_the_router; then
    echo "$(date) $name_of_the_router already exists"
else
    created_router=$(openstack router create --tag $tag_name $name_of_the_router )
    echo "$(date) Created router $name_of_the_router"
    # add subnet and externel gateway to the router
    set_gateway=$(openstack router set --external-gateway ext-net $name_of_the_router)
    add_subnet=$(openstack router add subnet $name_of_the_router $name_of_the_subnet)
fi

# check if security group already exists
existing_security_groups=$(openstack security group list --tag $tag_name -f value)
# create security group
if [[ -z "$existing_security_groups" ||  "$existing_security_groups" != *"$name_of_the_securitygroup"* ]]
then
    created_security_group=$(openstack security group create --tag $tag_name $name_of_the_securitygroup -f json)
    rule1=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 22 --protocol tcp --ingress $name_of_the_securitygroup)
    rule2=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 80 --protocol icmp --ingress $name_of_the_securitygroup)
    rule3=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 5000 --protocol tcp --ingress $name_of_the_securitygroup)
    rule4=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 8080 --protocol tcp --ingress $name_of_the_securitygroup)
    rule5=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 6000 --protocol udp --ingress $name_of_the_securitygroup)
    rule6=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 9090 --protocol tcp --ingress $name_of_the_securitygroup)
    rule7=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 9100 --protocol tcp --ingress $name_of_the_securitygroup)
    rule8=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 3000 --protocol tcp --ingress $name_of_the_securitygroup)
    rule9=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 161 --protocol udp --ingress $name_of_the_securitygroup)
    rule10=$(openstack security group rule create --protocol 112 $name_of_the_securitygroup) #VVRP protocol

    echo "$(date) Created security group $name_of_the_securitygroup"
else
    echo "$(date) $name_of_the_securitygroup already exists"
fi

if [[ -f "$sshconfig" ]] ; then
    rm "$sshconfig"
fi

if [[ -f "$knownhosts" ]] ; then
    rm "$knownhosts"
fi

if [[ -f "$hostsfile" ]] ; then
    rm "$hostsfile"
fi

# if [[ -f "$f1" ]] ; then
#     rm "$f1"
# fi

# if [[ -f "$f2" ]] ; then
#     rm "$f2"
# fi

## Create port for Virtual IP
vip=$(openstack port create --network "$name_of_the_network" --fixed-ip subnet="$name_of_the_subnet" --no-security-group "$vip_port" )

unassigned_ips=$(openstack floating ip list --status DOWN -f value -c "Floating IP Address")
