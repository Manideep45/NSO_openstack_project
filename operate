#!/bin/bash
current_date_time=$(date)
rc_file=$1
tag="$2"
publickey=$3

pvtkey="${publickey%.pub}"
current_dir="$(pwd)"
pvtkey_path="${current_dir}/${pvtkey}"

echo "$current_date_time Running Operation mode with tag:$tag using $rc_file credentials."
source $rc_file

# Define variables
name_of_the_network="${tag}_network"
name_of_the_subnet="${tag}_subnet"
name_of_the_keypair="${tag}_key"
name_of_the_router="${tag}_router"
name_of_the_securitygroup="${tag}_security_group"
haproxy_server1="${tag}_HAproxy1"
haproxy_server2="${tag}_HAproxy2"
bastion_server="${tag}_bastion"
server_name="${tag}_dev"
vport_name="${tag}_vport" #virtual ip port name

sshconfig="config"
hostsfile="hosts"
vport_file="vipaddr"

status_new=false

#########           CONFIGURING SERVERS             ######################

#1. BASTION SERVER
build_bastion() {
        #1      CREATE Bastion Server           ##
        existing_bastion=$(openstack server list --status ACTIVE --column Name -f value | grep "^$bastion_server$") #get exact match in search

        if echo "$existing_bastion" | grep -q "\b$bastion_server\b"; then
                        echo "$(date) Bastion: Already exists $bastion_server"
        else
                        bastion=$(openstack server create --image "Ubuntu 20.04 Focal Fossa x86_64" $bastion_server --key-name $name_of_the_keypair --flavor "1C-2GB-50GB" --network $name_of_the_network --security-group $name_of_the_securitygroup)
                        while true; do                                
                                        server_status=$(openstack server show "$bastion_server" -f value -c status)
                                        if [ "$server_status" == "ACTIVE" ]; then
                                                        break
                                        fi
                        done                        
                        echo "$(date) Bastion: Created server $bastion_server."
        fi

        # BASTION FIXED-IP
        bastion_ip=$(openstack server show $bastion_server -c addresses -f value | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}'| awk 'NR==1')
        echo "$(date) Bastion: Fixed IP:--$bastion_ip"

        #2.      existing FLOATING IPs           ##
        existing_bastion_fip=$(openstack floating ip list --fixed-ip-address $bastion_ip -c "Floating IP Address" -f value)
        
        if [[ -n "$existing_bastion_fip" ]]; then
                        ### 3.     GET: FLOATING IP 1           ###
                        echo "$(date) Bastion: Floating IP:$existing_bastion_fip found attached to Bastion IP:$bastion_ip"
                        fip1=$existing_bastion_fip   
                        echo $fip1 > floating_ip1 
        else
                        ### 3.     CREATE: FLOATING IP 1        ###
                        echo "$(date) Bastion: Assigning Floating IP for Bastion"
                        fip1=$(create_fip)
                        echo $fip1 > floating_ip1 # storing fip1 in a file "floating_ip1"

                        #1 ADD: Adding FLOATING IP (to the)---> BASTION Server.
                        update_fip1=$(openstack server add floating ip $bastion_server $fip1)           
        fi

        bastion_fip=$(openstack floating ip list --fixed-ip-address $bastion_ip -c "Floating IP Address" -f value)
                
        echo "$(date) Bastion: Configured with Fixed-IP:$bastion_ip & Floating-IP:$bastion_fip."
        echo ""
}

#2. HAPROXY SERVERS
build_HAproxy() {
        existing_haproxy1=$(openstack server list --status ACTIVE --column Name -f value | grep "^$haproxy_server1$") #get exact match in search
        if echo "$existing_haproxy1" | grep -q "\b$haproxy_server1\b"; then
                        echo "$(date) HAproxy: Already exists $haproxy_server1"
        else
                        haproxy1=$(openstack server create --image "Ubuntu 20.04 Focal Fossa x86_64" $haproxy_server1 --key-name $name_of_the_keypair --flavor "1C-2GB-50GB" --network $name_of_the_network --security-group $name_of_the_securitygroup)
                        while true; do                                
                                        server_status1=$(openstack server show "$haproxy_server1" -f value -c status)
                                        if [ "$server_status1" == "ACTIVE" ]; then
                                                        break
                                        fi
                        done  
                        echo "$(date) HAproxy: Created server $haproxy_server1"
                        status_new=true
        fi

        existing_haproxy2=$(openstack server list --status ACTIVE --column Name -f value | grep "^$haproxy_server2$") #get exact match in search
        if echo "$existing_haproxy2" | grep -q "\b$haproxy_server2\b"; then
                        echo "$(date) HAproxy: Already exists $haproxy_server2"
        else
                        haproxy2=$(openstack server create --image "Ubuntu 20.04 Focal Fossa x86_64" $haproxy_server2 --key-name $name_of_the_keypair --flavor "1C-2GB-50GB" --network $name_of_the_network --security-group $name_of_the_securitygroup)
                        while true; do                                
                                        server_status2=$(openstack server show "$haproxy_server2" -f value -c status)
                                        if [ "$server_status2" == "ACTIVE" ]; then
                                                        break
                                        fi
                        done  
                        echo "$(date) HAproxy: Created server $haproxy_server2."
                        status_new=true
        fi      
}

#3. VIRTUAL PORT
config_vport() {
        # HAproxy IPs
        ip_ha1=$(openstack server show $haproxy_server1 -c addresses -f value | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}')
        ip_ha2=$(openstack port list --server $haproxy_server2 -f json | jq -r '.[0]."Fixed IP Addresses"[0].ip_address')

        echo "$(date) HAproxy: Configured with Fixed IPs: $ip_ha1 and $ip_ha2" 

        #1.      create VIRTUAL PORT            ##
        existing_vport=$(openstack port list | grep "$vport_name" | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}')
        if [[ -n "$existing_vport" ]]; then
                        echo "$(date) Virtual Port: Already exists $vport_name"
        else
                        new_virtualport=$(openstack port create --network "$name_of_the_network" --fixed-ip subnet="$name_of_the_subnet" --no-security-group "$vport_name")
                        echo "$(date) Virtual Port: Created port $vport_name"
                        status_new=true
        fi

        # IP addr Virtual Port
        ip_vport=$(openstack port show $vport_name --format json | jq -r '.fixed_ips[0].ip_address')
        echo "$ip_vport" >> $vport_file # keeping V-Port FIXED IP address in a file "vipaddr"  
