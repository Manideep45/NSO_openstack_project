#!/bin/bash

rc_file=$1
tag_name=$2
publickey=$3

# Define variables
name_of_the_network="$2_newnetwork"
name_of_the_subnet="$2_newsubnet"
name_of_the_keypair="$2_newkey"
name_of_the_router="$2_newrouter"
name_of_the_securitygroup="$2_security_group"
haproxy_server="$2_HAproxy"
haproxy_server2="$2_HAproxy2"
bastion_server="$2_bastion"
dev_server="$2_dev"
sshconfig="config"
knownhosts="known_hosts"
hostsfile="hosts"

run_status=0 ##ansible run status
echo "Running Operation mode for tag: $tag_name using $rc_file for credentials"
source $rc_file

generate_config(){
    bastionfip=$(openstack server list --name $bastion_server -c Networks -f value | grep -Po '\d+\.\d+\.\d+\.\d+' | awk 'NR==2')
    haproxyfip=$(openstack server show $haproxy_server -c addresses | grep -Po '\d+\.\d+\.\d+\.\d+' | awk 'NR==1')
    haproxyfip2=$(openstack server list --name $haproxy_server2 -c Networks -f value | grep -Po '\d+\.\d+\.\d+\.\d+' | awk 'NR==1')

    echo "$(date) Generating config file"
    echo "Host $bastion_server" >> $sshconfig
    echo "   User ubuntu" >> $sshconfig
    echo "   HostName $bastionfip" >> $sshconfig
    echo "   IdentityFile ~/.ssh/id_rsa" >> $sshconfig
    echo "   StrictHostKeyChecking no" >> $sshconfig
    echo "   PasswordAuthentication no" >> $sshconfig

    echo " " >> $sshconfig
    echo "Host $haproxy_server" >> $sshconfig
    echo "   User ubuntu" >> $sshconfig
    echo "   HostName $haproxyfip" >> $sshconfig
    echo "   IdentityFile ~/.ssh/id_rsa" >> $sshconfig
    echo "   StrictHostKeyChecking no" >> $sshconfig
    echo "   PasswordAuthentication no ">> $sshconfig
    echo "   ProxyJump $bastion_server" >> $sshconfig

    echo " " >> $sshconfig
    echo "Host $haproxy_server2" >> $sshconfig
    echo "   User ubuntu" >> $sshconfig
    echo "   HostName $haproxyfip2" >> $sshconfig
    echo "   IdentityFile ~/.ssh/id_rsa" >> $sshconfig
    echo "   StrictHostKeyChecking no" >> $sshconfig
    echo "   PasswordAuthentication no ">> $sshconfig
    echo "   ProxyJump $bastion_server" >> $sshconfig

    # generate hosts file
    echo "[bastion]" >> $hostsfile
    echo "$bastion_server" >> $hostsfile
    echo " " >> $hostsfile
    echo "[HAproxy]" >> $hostsfile
    echo "$haproxy_server" >> $hostsfile
    echo "$haproxy_server2" >> $hostsfile

    echo " " >> $hostsfile
    echo "[primary_proxy]" >> $hostsfile
    echo "$haproxy_server" >> $hostsfile
    echo " " >> $hostsfile
    echo "[backup_proxy]" >> $hostsfile
    echo "$haproxy_server2" >> $hostsfile

    echo " " >> $hostsfile
    echo "[webservers]" >> $hostsfile

    # Get the list of active servers
    active_servers=$(openstack server list --status ACTIVE -f value -c Name | grep -oP "${tag_name}"'_dev([1-9]+)')
    echo "$active_servers"
    
    # Loop through each active server and extract its IP address
    for server in $active_servers; do
        ip_address=$(openstack server list --name $server -c Networks -f value | grep -Po '\d+\.\d+\.\d+\.\d+')
        echo " " >> $sshconfig
        echo "Host $server" >> $sshconfig
        echo "   User ubuntu" >> $sshconfig
        echo "   HostName $ip_address" >> $sshconfig
        echo "   IdentityFile ~/.ssh/id_rsa" >> $sshconfig
        echo "   UserKnownHostsFile=~/dev/null" >> $sshconfig
        echo "   StrictHostKeyChecking no" >> $sshconfig
        echo "   PasswordAuthentication no" >> $sshconfig
        echo "   ProxyJump $bastion_server" >> $sshconfig 

        echo "$server" >> $hostsfile
    done

    echo " " >> $hostsfile
    echo "[all:vars]" >> $hostsfile
    echo "ansible_user=ubuntu" >> $hostsfile
    echo "ansible_ssh_private_key_file=~/.ssh/id_rsa" >> $hostsfile
    echo "ansible_ssh_common_args=' -F $sshconfig '" >> $hostsfile
}

create_dev_servers() {
    local devservers_to_add=$1
    local sequence=$2
    
    while [ $devservers_to_add -gt 0 ]
    do   
        devserver_name=${dev_server}${sequence}
        server_create=$(openstack server create --image "Ubuntu 20.04 Focal Fossa 20200423"  $devserver_name --key-name "$name_of_the_keypair" --flavor "1C-2GB-50GB" --network "$name_of_the_network" --security-group "$name_of_the_securitygroup")
        echo "$(date) Created $devserver_name server"
        ((devservers_to_add--))
        ((sequence++))
        
        active=false
        while [ "$active" = false ]; do
            server_status=$(openstack server show "$devserver_name" -f value -c status)
            if [ "$server_status" == "ACTIVE" ]; then
                active=true
            fi
        done
    done
}

delete_dev_servers() {
    local devservers_to_remove=$1
    
    sequence=1
    while [[ $sequence -le $devservers_to_remove ]]; do
        server_to_delete=$(openstack server list --status ACTIVE -f value -c Name | grep -m1 -oP "${tag_name}"'_dev([1-9]+)')     
        deleted_server=$(openstack server delete "$server_to_delete" --wait)
        echo "$(date) Deleted $server_to_delete server"
        ((sequence++))
    done
}

while true
do
    required_dev_servers=$(cat servers.conf)
    echo "$(date) Reading server.conf, we need $required_dev_servers dev nodes"

    existing_servers=$(openstack server list --status ACTIVE --column Name -f value)
    devservers_count=$(grep -c $dev_server <<< $existing_servers)
    echo "$(date) We currently have $devservers_count dev nodes"

    if [[ $devservers_count -lt $required_dev_servers ]]; then
        devservers_to_add=$((required_dev_servers - devservers_count))
        echo "$(date) We need to create $devservers_to_add dev nodes"
        create_dev_servers $devservers_to_add $devservers_count
    elif [[ $devservers_count -gt $required_dev_servers ]]; then
        devservers_to_remove=$((devservers_count - required_dev_servers))
        echo "$(date) We need to delete $devservers_to_remove dev nodes"
        delete_dev_servers $devservers_to_remove
    else
        echo "$(date) We have the required number of dev nodes"
    fi

    # Generate the config file and hosts file
    generate_config

    # Run Ansible playbook
    echo "Running Ansible playbook..."
    ansible-playbook -i $hostsfile site.yaml

    sleep 30
done
